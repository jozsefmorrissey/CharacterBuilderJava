
--==========================  TABLES  =====================--

CREATE TABLE PERMISSION (
  ID NUMBER PRIMARY KEY,
  PERMISSION_LEVEL VARCHAR2(16)
);

CREATE TABLE CB_USER (
  ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(64),
  EMAIL VARCHAR2(128) UNIQUE,
  PHONE_NUMBER NUMBER(11),
  PERMISSION_ID NUMBER,
  PASSWORD VARCHAR(128),
  LAST_LOCATION_ID NUMBER(2),
  TITLE VARCHAR(64),
  USER_STANDING NUMBER(2),
  PHOTO BLOB,
  CONSTRAINT FK_USER_PERMISSION FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSION(ID)
);

CREATE TABLE CATEGORY(
  ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(32),
  POST_DESCRIPTION VARCHAR2(256),
  ATTEND_DESCRIPTION VARCHAR2(256)
);

CREATE TABLE CATEGORY_PREFERENCE(
  ID NUMBER,
  USER_ID NUMBER,
  CATEGORY_ID NUMBER,
  POSITION NUMBER(2),
  CONSTRAINT FK_CAT_PREF_CAT FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(ID),
  CONSTRAINT FK_CAT_PREF_USER FOREIGN KEY (USER_ID) REFERENCES CB_USER(ID)
);

CREATE TABLE COORDINATE (
  ID NUMBER PRIMARY KEY,
  LONGITUDE NUMBER(8,5),
  LATITUDE NUMBER(7,5)
);

CREATE TABLE LOCATION (
  ID NUMBER PRIMARY KEY,
  USER_ID NUMBER,
  COORDINATE_ID NUMBER,
  NAME VARCHAR2(32),
  RADIUS_METERS NUMBER(8),
  CONSTRAINT FK_LOCATION_USER FOREIGN KEY (USER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_LOCATION_COORDINATE FOREIGN KEY (COORDINATE_ID) REFERENCES COORDINATE(ID)
);

CREATE TABLE EVENT (
  ID NUMBER PRIMARY KEY,
  TITLE VARCHAR2(128),
  CATEGORY_ID NUMBER,
  POSTER_ID NUMBER,
  EVENT_STANDING NUMBER(2),
  CONSTRAINT FK_EVENT_USER FOREIGN KEY (POSTER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_EVENT_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(ID)
);

CREATE TABLE EVENT_IMAGE (
    ID NUMBER PRIMARY KEY,
    EVENT_ID NUMBER,
    PHOTO BLOB,
    POSITION NUMBER (2),
    CONSTRAINT FK_EVENT_IMAGE_EVENT FOREIGN KEY (EVENT_ID) REFERENCES EVENT(ID)
);

CREATE TABLE SKILL(
  ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(32) UNIQUE
);

CREATE TABLE  SKILL_MAP(
  ID NUMBER PRIMARY KEY,
  SKILL_ID NUMBER,
  EVENT_ID NUMBER,
  ATTRIBUTER_ID NUMBER,
  RECIEVER_ID NUMBER,
  VALUE NUMBER(1),
  ATTR_SKILL_SNP_SHT_VALUE NUMBER(1),
  CONSTRAINT FK_EVENT_ID_EVENT FOREIGN KEY (EVENT_ID) REFERENCES EVENT(ID),
  CONSTRAINT FK_ATTRIBUTER_ID_USER FOREIGN KEY (ATTRIBUTER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_RECIEVER_ID_USER FOREIGN KEY (RECIEVER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_SKILL_MAP_SKILL FOREIGN KEY (SKILL_ID) REFERENCES SKILL(ID),
  CONSTRAINT MAP_RECIEVER_ATTRIBUTER_NOT_EQ CHECK (ATTRIBUTER_ID != RECIEVER_ID)
);

CREATE TABLE SKILL_DESCRIPTION (
    SKILL_MAP_ID NUMBER,
    DESCRIPTION VARCHAR(256),
    POSITION NUMBER(4),
    CONSTRAINT FK_SKILL_DESCRIPTION_MAP FOREIGN KEY (SKILL_MAP_ID) REFERENCES SKILL_MAP(ID),
    CONSTRAINT SKILL_MAP_PK PRIMARY KEY (SKILL_MAP_ID, POSITION)
);

CREATE TABLE EVENT_DESCRIPTION (
    EVENT_ID NUMBER,
    DESCRIPTION VARCHAR(256),
    POSITION NUMBER(4),
    CONSTRAINT FK_EVENT_DESCRIPTION_EVENT FOREIGN KEY (EVENT_ID) REFERENCES EVENT(ID),
    CONSTRAINT EVENT_DESC_PK PRIMARY KEY (EVENT_ID, POSITION)
);

CREATE TABLE USER_DESCRIPTION (
    USER_ID NUMBER,
    DESCRIPTION VARCHAR(256),
    POSITION NUMBER(4),
    CONSTRAINT FK_USER_DESCRIPTION_MAP FOREIGN KEY (USER_ID) REFERENCES CB_USER(ID),
    CONSTRAINT USER_DESC_PK PRIMARY KEY (USER_ID, POSITION)
);

CREATE TABLE EVENT_TIME (
  ID NUMBER PRIMARY KEY,
  EVENT_ID NUMBER,
  TIME_STAMP TIMESTAMP,
  CONSTRAINT FK_EVENT_TIME_EVENT FOREIGN KEY (EVENT_ID) REFERENCES EVENT(ID)
);

CREATE TABLE PARTICIPANT (
  EVENT_TIME_ID NUMBER,
  USER_ID NUMBER,
  CONSTRAINT FK_PARTICIPANT_EVENT_TIME FOREIGN KEY (EVENT_TIME_ID) REFERENCES EVENT_TIME(ID),
  CONSTRAINT FK_PARTICIPANT_USER FOREIGN KEY (USER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT COMP_PK_PARTICIPANT PRIMARY KEY (EVENT_TIME_ID, USER_ID)
);

CREATE TABLE PROFILE_LINK (
  ID NUMBER,
  USER_ID_1 NUMBER,
  USER_ID_2 NUMBER,
  CREATOR_ID NUMBER,
  IS_GOOD NUMBER(1),
  REASON VARCHAR2(256),
  CONSTRAINT FK_LINK_USER_1 FOREIGN KEY (USER_ID_1) REFERENCES CB_USER(ID),
  CONSTRAINT FK_LINK_USER_2 FOREIGN KEY (USER_ID_2) REFERENCES CB_USER(ID),
  CONSTRAINT FK_LINK_CREATOR_USER FOREIGN KEY (CREATOR_ID) REFERENCES CB_USER(ID),
  CONSTRAINT COMP_PK_PROFILE_LINK PRIMARY KEY (USER_ID_1, USER_ID_2, CREATOR_ID),
  CONSTRAINT LINK_REC_ATTR_NOT_EQ CHECK (USER_ID_1 != USER_ID_2)
);

CREATE TABLE USER_RATING (
  ID NUMBER PRIMARY KEY,
  ATTRIBUTER_ID NUMBER,
  RECIEVER_ID NUMBER,
  DESCRIPTION VARCHAR2(256),
  TIME_STAMP TIMESTAMP,
  VALUE NUMBER(1),
  ATTRIBUTER_SNAPSHOT_RATING NUMBER(1),
  CONSTRAINT FK_RAT_ATTRIBUTER_ID_USER FOREIGN KEY (ATTRIBUTER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_RAT_RECIEVER_ID_USER FOREIGN KEY (RECIEVER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT RECIEVER_ATTRIBUTER_NOT_EQ CHECK (ATTRIBUTER_ID != RECIEVER_ID)
);

CREATE TABLE EVENT_RATING (
  ID NUMBER PRIMARY KEY,
  ATTRIBUTER_ID NUMBER,
  EVENT_ID NUMBER,
  DESCRIPTION VARCHAR2(256),
  TIME_STAMP TIMESTAMP,
  VALUE NUMBER(1),
  ATTRIBUTER_SNAPSHOT_RATING NUMBER(1),
  CONSTRAINT FK_RAT_EVN_ATTR_ID_USER FOREIGN KEY (ATTRIBUTER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_RAT_EVENT_ID_USER FOREIGN KEY (EVENT_ID) REFERENCES EVENT(ID)
);

CREATE TABLE EVENT_MESSAGE(
  ID NUMBER PRIMARY KEY,
  SENDER_ID NUMBER,
  EVENT_ID NUMBER,
  RECIPIENT_ID NUMBER,  -- This should never be set
  MESSAGE VARCHAR2(256),
  TIME_STAMP TIMESTAMP,
  CONSTRAINT FK_EVENT_MSG FOREIGN KEY (EVENT_ID) REFERENCES EVENT(ID),
  CONSTRAINT FK_SEND_E_MSG FOREIGN KEY (SENDER_ID) REFERENCES CB_USER(ID)
);

CREATE TABLE EVENT_MESSAGE_RECIPIENT(
  ID NUMBER PRIMARY KEY,
  RECIEVER_ID NUMBER,
  EVENT_MSG_ID NUMBER,
  CONSTRAINT FK_EVENT_MSG_REC_USER FOREIGN KEY (RECIEVER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_EVENT_MSG_REC_EVENT FOREIGN KEY (EVENT_MSG_ID) REFERENCES EVENT_MESSAGE(ID)
);

CREATE TABLE EVENT_TIME_MESSAGE(
  ID NUMBER PRIMARY KEY,
  SENDER_ID NUMBER,
  EVENT_TIME_ID NUMBER,
  RECIPIENT_ID NUMBER,  -- This should never be set
  MESSAGE VARCHAR2(256),
  TIME_STAMP TIMESTAMP,
  CONSTRAINT FK_EVENT_TIME_ET_MESSAGE FOREIGN KEY (EVENT_TIME_ID) REFERENCES EVENT_TIME(ID),
  CONSTRAINT FK_SEND_ET_MSG_USER FOREIGN KEY (SENDER_ID) REFERENCES CB_USER(ID)
);

CREATE TABLE EVENT_TIME_MESSAGE_RECIPIENT(
  ID NUMBER PRIMARY KEY,
  RECIEVER_ID NUMBER,
  EVENT_TIME_MSG_ID NUMBER,
  CONSTRAINT FK_EVTM_MSG_REC_USER FOREIGN KEY (RECIEVER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_EVTM_MSG_REC_EVENT FOREIGN KEY (EVENT_TIME_MSG_ID) REFERENCES EVENT_TIME_MESSAGE(ID)
);

CREATE TABLE MESSAGE(
  ID NUMBER PRIMARY KEY,
  SENDER_ID NUMBER,
  RECIEVER_ID NUMBER,
  MESSAGE VARCHAR2(256),
  TIME_STAMP TIMESTAMP,
  CONSTRAINT FK_SEND_U_MSG_USER FOREIGN KEY (SENDER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_REC_U_MSG_USER FOREIGN KEY (RECIEVER_ID) REFERENCES CB_USER(ID)
);

CREATE TABLE FLAG (
  ID NUMBER PRIMARY KEY,
  TYPE VARCHAR2(16)
);

CREATE TABLE USER_FLAG(
  BEARER_ID NUMBER,
  TARGET_ID NUMBER,
  REASON VARCHAR2(256),
  FLAG_ID NUMBER,
  CONSTRAINT FK_U_FLAG_FLAG FOREIGN KEY (FLAG_ID) REFERENCES FLAG(ID),
  CONSTRAINT FK_U_FLAG_BEARER_USER FOREIGN KEY (BEARER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_U_FLAG_TARGET_USER FOREIGN KEY (TARGET_ID) REFERENCES CB_USER(ID),
  CONSTRAINT COMP_PK_USER_FLAG PRIMARY KEY (BEARER_ID, TARGET_ID, FLAG_ID)
);

CREATE TABLE EVENT_FLAG(
  BEARER_ID NUMBER,
  TARGET_ID NUMBER,
  REASON VARCHAR2(256),
  FLAG_ID NUMBER,
  CONSTRAINT FK_E_FLAG_FLAG FOREIGN KEY (FLAG_ID) REFERENCES FLAG(ID),
  CONSTRAINT FK_E_FLAG_BEARER_USER FOREIGN KEY (BEARER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_E_FLAG_TARGET_EVENT FOREIGN KEY (TARGET_ID) REFERENCES EVENT(ID),
  CONSTRAINT COMP_PK_EVENT_FLAG PRIMARY KEY (BEARER_ID, TARGET_ID, FLAG_ID)
);

CREATE TABLE CREATED_EVENT_FLAG(
  EVENT_ID NUMBER,
  FLAG_ID NUMBER,
  CONSTRAINT FK_EVENT_FLAG FOREIGN KEY (EVENT_ID) REFERENCES EVENT(ID),
  CONSTRAINT FK_CREATED_E_FLAG_FLAG FOREIGN KEY (FLAG_ID) REFERENCES FLAG(ID),
  CONSTRAINT COMP_PK_CREATED_EV_FLG PRIMARY KEY (EVENT_ID, FLAG_ID)
);

CREATE TABLE HUMPTY_DUMPTY(
  USER_ID NUMBER,
  FLAG_ID NUMBER,
  CONSTRAINT FK_USER_FLAG FOREIGN KEY (USER_ID) REFERENCES CB_USER(ID),
  CONSTRAINT FK_CREATED_U_FLAG_FLAG FOREIGN KEY (FLAG_ID) REFERENCES FLAG(ID),
  CONSTRAINT COMP_PK_CREATED_USR_FLG PRIMARY KEY (USER_ID, FLAG_ID)
);

CREATE TABLE SKILL_STANDING (
  USER_ID NUMBER,
  SKILL_ID NUMBER,
  SKILL_STANDING NUMBER(2),
  CONSTRAINT FK_SKILL_STANDING_EVENT FOREIGN KEY (SKILL_ID) REFERENCES SKILL(ID),
  CONSTRAINT COMP_PK_SKILL_STANDING PRIMARY KEY (USER_ID, SKILL_ID)
);
